datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider     = "prisma-client-js"
  output       = "../aivf-app/node_modules/.prisma/client"
  engineType   = "library"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  dateOfBirth   DateTime?
  image         String?
  password      String?
  role          Role      @default(PATIENT)
  accounts      Account[]
  sessions      Session[]

  clinicId      String?
  clinic        Clinic?   @relation(fields: [clinicId], references: [id])

  uploadedDocuments Document[] @relation("UploadedDocuments")
  patientDocuments  Document[] @relation("PatientDocuments")
  passwordResetTokens PasswordResetToken[]
  appointments Appointment[]
  protocolId    String?
  protocol      Protocol? @relation(fields: [protocolId], references: [id])
  protocolStartDate DateTime?
  injectionCompletions InjectionCompletion[]
  assignedProtocols PatientProtocol[]
}

model Clinic {
  id        String     @id @default(cuid())
  name      String
  users     User[]
  documents Document[]
  medications Medication[]
  protocols   Protocol[]
  appointments Appointment[]
}

model Document {
  id           String   @id @default(cuid())
  filename     String
  createdAt    DateTime @default(now())
  content      String   @db.Text
  clinicId     String
  clinic       Clinic   @relation(fields: [clinicId], references: [id])
  uploadedById String
  uploadedBy   User     @relation("UploadedDocuments", fields: [uploadedById], references: [id])
  patientId    String
  patient      User     @relation("PatientDocuments", fields: [patientId], references: [id], onDelete: Cascade)
  updatedAt    DateTime @updatedAt
}

model Medication {
  id          String    @id @default(cuid())
  name        String
  description String?
  clinicId    String
  clinic      Clinic    @relation(fields: [clinicId], references: [id], onDelete: Cascade)
}

model Protocol {
  id          String   @id @default(cuid())
  name        String
  description String?
  phases      Json
  clinicId    String
  clinic      Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  patients    User[]
  completions InjectionCompletion[]
  assignments PatientProtocol[]

  @@map("protocols")
}

enum Role {
  CLINIC_ADMIN
  PATIENT
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime

  @@map("password_reset_tokens")
}

model Appointment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      DateTime
  type      String
  notes     String?
  patientId String
  patient   User     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  clinicId  String
  clinic    Clinic   @relation(fields: [clinicId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model InjectionCompletion {
  id                 String   @id @default(cuid())
  patientId          String
  patient            User     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  protocolId         String
  protocol           Protocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  
  injectionDate      DateTime @db.Date
  injectionTime      String   
  markedCompletedAt  DateTime @default(now())
  mood               String?
  moodAnalysis       String?

  @@unique([patientId, protocolId, injectionDate, injectionTime])
  @@map("injection_completions")
}

model PatientProtocol {
  id         String   @id @default(cuid())
  patientId  String
  protocolId String
  startDate  DateTime
  
  patient    User     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  protocol   Protocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)

  @@unique([patientId, protocolId, startDate])
  @@map("patient_protocols")
}
