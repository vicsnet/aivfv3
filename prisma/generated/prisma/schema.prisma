datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(PATIENT)
  accounts      Account[]
  sessions      Session[]

  clinicId String?
  clinic   Clinic? @relation(fields: [clinicId], references: [id])

  documents Document[]
}

model Clinic {
  id          String       @id @default(cuid())
  name        String
  users       User[]
  documents   Document[]
  medications Medication[]
  protocols   Protocol[]
}

model Document {
  id           String   @id @default(cuid())
  filename     String
  createdAt    DateTime @default(now())
  content      String   @db.Text
  clinicId     String
  clinic       Clinic   @relation(fields: [clinicId], references: [id])
  uploadedById String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
}

model Medication {
  id          String      @id @default(cuid())
  name        String
  description String?
  clinicId    String
  clinic      Clinic      @relation(fields: [clinicId], references: [id])
  injections  Injection[]

  @@unique([clinicId, name])
}

model Protocol {
  id          String   @id @default(cuid())
  name        String
  description String?
  clinicId    String
  clinic      Clinic   @relation(fields: [clinicId], references: [id])
  phases      Phase[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Phase {
  id         String      @id @default(cuid())
  name       String
  duration   Int
  protocolId String
  protocol   Protocol    @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  injections Injection[]
  order      Int
}

model Injection {
  id           String     @id @default(cuid())
  dayOfPhase   Int
  dosage       String
  time         String
  phaseId      String
  phase        Phase      @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  medicationId String
  medication   Medication @relation(fields: [medicationId], references: [id], onDelete: Restrict)
}

enum Role {
  CLINIC_ADMIN
  PATIENT
}
